# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'fr'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php,Application}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    fos_user.registration.controller1:
        class: FOS\UserBundle\Controller\RegistrationController
        arguments: ["@event_dispatcher","@fos_user.registration.form.factory","@fos_user.user_manager","@security.token_storage"]
        public: true
        calls:
            - [setContainer, ["@service_container"]]

    app.form.registration:
        class: App\Form\RegistrationType
        tags:
            - { name: form.type, alias: app_user_registration }

    admin.affectation:
        class: App\Admin\AffectationAdmin
        arguments: [~, App\Entity\Affectation, App\Controller\AffectationAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Affectation }
        public: true

    admin.affectation_confirme:
        class: App\Admin\AffectationConfirmeAdmin
        arguments: [~, App\Entity\AffectationConfirme, App\Controller\AffectationConfirmeAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Affectation Confirme }
        public: true

    admin.annonce:
        class: App\Admin\AnnonceAdmin
        arguments: [~, App\Entity\Annonce, App\Controller\AnnonceAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Annonce }
        public: true

    admin.artisan:
        class: App\Admin\ArtisanAdmin
        arguments: [~, App\Entity\Artisan, App\Controller\ArtisanAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Artisan }
        public: true

    admin.sous_specialite:
        class: App\Admin\SousSpecialiteAdmin
        arguments: [~, App\Entity\SousSpecialite, App\Controller\SousSpecialiteAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Sous catégorie }
        public: true

    admin.specialite:
        class: App\Admin\SpecialiteAdmin
        arguments: [~, App\Entity\Specialite, App\Controller\SpecialiteAdminController,"@doctrine.orm.entity_manager","@swiftmailer.mailer"]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Catégorie }
        public: true

    admin.user:
        class: App\Admin\UserAdmin
        arguments: [~, App\Entity\User, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: User }
        public: true


    annonce:
        class: App\Event\AnnonceEvent
        arguments: ["@session","@doctrine.orm.entity_manager","@swiftmailer.mailer"]
        tags:
            - { name: kernel.event_listener, event: fos_user.registration.confirmed, method: annonceOnConfirmed }

    admin.attribut_add:
        class: App\Admin\AttributAddAdmin
        arguments: [~, App\Entity\AttributAdd, App\Controller\AttributAddAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Attribut Additionel }
        public: true

    admin.estimation:
        class: App\Admin\EstimationAdmin
        arguments: [~, App\Entity\Estimation, App\Controller\EstimationAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Estimation }
        public: true

    admin.artisan_etat:
        class: App\Admin\ArtisanEtatAdmin
        arguments: [~, App\Entity\ArtisanEtat, App\Controller\ArtisanEtatAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: ArtisanEtat }
        public: true

    admin.abonnement:
        class: App\Admin\AbonnementAdmin
        arguments: [~, App\Entity\Abonnement, App\Controller\AbonnementAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Abonnement }
        public: true

    admin.coupon:
        class: App\Admin\CouponAdmin
        arguments: [~, App\Entity\Coupon, App\Controller\CouponAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Coupon }
        public: true

    admin.pack:
        class: App\Admin\PackAdmin
        arguments: [~, App\Entity\Pack, App\Controller\PackAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Pack }
        public: true

    admin.transaction:
        class: App\Admin\TransactionAdmin
        arguments: [~, App\Entity\Transaction, App\Controller\TransactionAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Transaction }
        public: true
