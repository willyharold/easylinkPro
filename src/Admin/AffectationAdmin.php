<?php

declare(strict_types=1);

namespace App\Admin;

use App\Entity\ArtisanEtat;
use Doctrine\Common\Persistence\ObjectManager;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Show\ShowMapper;

final class AffectationAdmin extends AbstractAdmin
{
    private $em;
    private $mailer;

    protected function configureDatagridFilters(DatagridMapper $datagridMapper): void
    {
        $datagridMapper
            ->add('id')
            ->add('annonce')
            ->add('estimation')
            ->add('dateEn')
            ;
    }

    protected function configureListFields(ListMapper $listMapper): void
    {
        $listMapper
            ->add('id')
            ->add('annonce')
            ->add('estimation')
            ->add('artisan')
            ->add('dateEn')
            ->add('_action', null, [
                'actions' => [
                    'show' => [],
                    'edit' => [],
                    'delete' => [],
                ],
            ]);
    }

    protected function configureFormFields(FormMapper $formMapper): void
    {
        $formMapper
            ->add('annonce')
            ->add('estimation')
            ->add('artisan')
            ;
    }

    protected function configureShowFields(ShowMapper $showMapper): void
    {
        $showMapper
            ->add('id')
            ->add('annonce')
            ->add('estimation')
            ->add('artisan')
            ->add('dateEn')
            ;
    }

    public function preUpdate($object)
    {
        foreach ($object->getArtisan() as $item){

            $artisanEtat = new ArtisanEtat();
            $artisanEtat->setEstimation($object->getEstimation());
            $artisanEtat->setAnnonce($object->getAnnonce());
            $artisanEtat->setEtat("En attente");
            $artisanEtat->setArtisan($item);

            $this->em->persist($artisanEtat);
            $this->em->flush();

            $message = (new \Swift_Message("Vous avez une notification"))
                ->setFrom('support@easylink.com')
                ->setTo($item->getEmail())
                ->setBody("email pour une affectation chez artisan. il doit l'invité a se connecté et accepter")
            ;
            $this->mailer->send($message);


        }

        parent::preUpdate($object); // TODO: Change the autogenerated stub
    }

    public function __construct(string $code, string $class, string $baseControllerName,ObjectManager $em, \Swift_Mailer $mailer)
    {
        $this->em = $em;
        $this->mailer = $mailer;
        parent::__construct($code, $class, $baseControllerName);
    }


}
